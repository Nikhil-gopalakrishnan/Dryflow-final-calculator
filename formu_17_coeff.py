import math


def peakwidth2drynessNL(sigmaf, pipe_size, steam_pressure, steam_velocity):
    a = 0
    c = 0
    dr = 0
    v = steam_velocity
    sigmaf = abs(sigmaf)
    P = steam_pressure

    A25 = [-1.45218661e+06, 4.63466714e+04, 1.81640715e+05, -5.63054710e+03, -1.49442893e+06, 4.77142781e+04,
           1.86870156e+05, -5.79704253e+03, 6.70999386e+05, -7.01093553e+04, 1.54400132e+03, -3.50603147e+05,
           3.93659235e+04, -2.57446093e+03, -4.66420581e+02, 2.60672255e+04, 4.14270342e+01]

    A40 = [1.16016492e+05, -4.64899318e+03, -2.29945731e+04, 1.14740401e+03,1.22926624e+05, -4.85834895e+03,
           -2.40264004e+04, 1.18969151e+03, -8.39658817e+03, 4.15288517e+03, -1.09366072e+02, 2.05555461e+04,
           -4.42352134e+03, 2.50057471e+02, 2.71489622e+01, -1.52760229e+03,-1.74933717e+00]

    A50 = [-6.40337996e+01, -6.36377645e+00, -3.35193112e+01, 5.20667058e+00, -6.88667220e+01, -6.38723792e+00,
           -3.37513449e+01, 5.30049767e+00, -8.53684995e+01, 1.22757965e+00, -1.04864014e-01, 1.02841428e+01,
           -8.31691473e-01, 1.03826092e-01, 8.79492078e-02, -6.86934037e-01, -2.61662825e-03]

    A80 = [-6.40337996e+01, -6.36377645e+00, -3.35193112e+01, 5.20667058e+00, -6.88667220e+01, -6.38723792e+00,
           -3.37513449e+01, 5.30049767e+00, -8.53684995e+01, 1.22757965e+00, -1.04864014e-01, 1.02841428e+01,
           -8.31691473e-01, 1.03826092e-01, 8.79492078e-02, -6.86934037e-01, -2.61662825e-03]

    A100 = [-6.40337996e+01, -6.36377645e+00, -3.35193112e+01, 5.20667058e+00, -6.88667220e+01, -6.38723792e+00,
            -3.37513449e+01, 5.30049767e+00, -8.53684995e+01, 1.22757965e+00, -1.04864014e-01, 1.02841428e+01,
            -8.31691473e-01, 1.03826092e-01, 8.79492078e-02, -6.86934037e-01, -2.61662825e-03]

    if pipe_size == 80:
        dr = A80[8] + A80[9] * v + A80[10] * pow(v, 2) + A80[11] * P + A80[12] * pow(P, 2) + A80[13] * pow(P, 2) * v +\
             A80[14] * pow(v, 2) * P + A80[15] * P * v + A80[16] * pow(P, 2) * pow(v, 2)
        a = A80[0] + A80[1] * v + A80[2] * P + A80[3] * P * v
        c = A80[4] + A80[5] * v + A80[6] * P + A80[7] * P * v

    elif pipe_size == 25:
        dr = A25[8] + A25[9] * v + A25[10] * pow(v, 2) + A25[11] * P + A25[12] * pow(P, 2) + A25[13] * pow(P, 2) * v +\
             A25[14] * pow(v, 2) * P + A25[15] * P * v + A25[16] * pow(P, 2) * pow(v, 2)
        a = A25[0] + A25[1] * v + A25[2] * P + A25[3] * P * v
        c = A25[4] + A25[5] * v + A25[6] * P + A25[7] * P * v

    elif pipe_size == 50:
        dr = A50[8] + A50[9] * v + A50[10] * pow(v, 2) + A50[11] * P + A50[12] * pow(P, 2) + A50[13] * pow(P, 2) * v + \
             A50[14] * pow(v, 2) * P + A50[15] * P * v + A50[16] * pow(P, 2) * pow(v, 2)
        a = A50[0] + A50[1] * v + A50[2] * P + A50[3] * P * v
        c = A50[4] + A50[5] * v + A50[6] * P + A50[7] * P * v

    elif pipe_size == 40:
        dr = A40[8] + A40[9] * v + A40[10] * pow(v, 2) + A40[11] * P + A40[12] * pow(P, 2) + A40[13] * pow(P, 2) * v + \
             A40[14] * pow(v, 2) * P + A40[15] * P * v + A40[16] * pow(P, 2) * pow(v, 2)
        a = A40[0] + A40[1] * v + A40[2] * P + A40[3] * P * v
        c = A40[4] + A40[5] * v + A40[6] * P + A40[7] * P * v

    elif pipe_size == 100:
        dr = A100[8] + A100[9] * v + A100[10] * pow(v, 2) + A100[11] * P + A100[12] * pow(P, 2) + A100[13] * pow(P, 2)\
             * v + A100[14] * pow(v, 2) * P + A100[15] * P * v + A100[16] * pow(P, 2) * pow(v, 2)
        a = A100[0] + A100[1] * v + A100[2] * P + A100[3] * P * v
        c = A100[4] + A100[5] * v + A100[6] * P + A100[7] * P * v

    else:
        return 0

    a /= dr
    c /= dr

    if (c - sigmaf)/a > 1.0:
        return 1
    else:
        return round(1.0 - math.sqrt(1 - (c - sigmaf) / a), 2)

# check for output values

